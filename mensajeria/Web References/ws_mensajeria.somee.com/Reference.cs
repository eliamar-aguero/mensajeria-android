//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace mensajeria.ws_mensajeria.somee.com {
    using System.Xml.Serialization;
    using System.Diagnostics;
    using System.Web.Services;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "8.4.8.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebService1Soap", Namespace="http://tempuri.org/")]
    public partial class WebService1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetAllContactsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSingleContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateContactOperationCompleted;
        
        /// <remarks/>
        public WebService1() {
            this.Url = "http://ws-mensajeria.somee.com/ContactosServices.asmx";
        }
        
        public WebService1(string url) {
            this.Url = url;
        }
        
        /// <remarks/>
        public event GetAllContactsCompletedEventHandler GetAllContactsCompleted;
        
        /// <remarks/>
        public event GetSingleContactCompletedEventHandler GetSingleContactCompleted;
        
        /// <remarks/>
        public event DeleteContactCompletedEventHandler DeleteContactCompleted;
        
        /// <remarks/>
        public event CreateContactCompletedEventHandler CreateContactCompleted;
        
        /// <remarks/>
        public event UpdateContactCompletedEventHandler UpdateContactCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllContacts", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAllContacts() {
            object[] results = this.Invoke("GetAllContacts", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllContactsAsync() {
            this.GetAllContactsAsync(null);
        }
        
        /// <remarks/>
        public void GetAllContactsAsync(object userState) {
            if ((this.GetAllContactsOperationCompleted == null)) {
                this.GetAllContactsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllContactsOperationCompleted);
            }
            this.InvokeAsync("GetAllContacts", new object[0], this.GetAllContactsOperationCompleted, userState);
        }
        
        private void OnGetAllContactsOperationCompleted(object arg) {
            if ((this.GetAllContactsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllContactsCompleted(this, new GetAllContactsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSingleContact", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetSingleContact(string name) {
            object[] results = this.Invoke("GetSingleContact", new object[] {
                        name});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetSingleContactAsync(string name) {
            this.GetSingleContactAsync(name, null);
        }
        
        /// <remarks/>
        public void GetSingleContactAsync(string name, object userState) {
            if ((this.GetSingleContactOperationCompleted == null)) {
                this.GetSingleContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSingleContactOperationCompleted);
            }
            this.InvokeAsync("GetSingleContact", new object[] {
                        name}, this.GetSingleContactOperationCompleted, userState);
        }
        
        private void OnGetSingleContactOperationCompleted(object arg) {
            if ((this.GetSingleContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSingleContactCompleted(this, new GetSingleContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteContact", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet DeleteContact(int id) {
            object[] results = this.Invoke("DeleteContact", new object[] {
                        id});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteContactAsync(int id) {
            this.DeleteContactAsync(id, null);
        }
        
        /// <remarks/>
        public void DeleteContactAsync(int id, object userState) {
            if ((this.DeleteContactOperationCompleted == null)) {
                this.DeleteContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteContactOperationCompleted);
            }
            this.InvokeAsync("DeleteContact", new object[] {
                        id}, this.DeleteContactOperationCompleted, userState);
        }
        
        private void OnDeleteContactOperationCompleted(object arg) {
            if ((this.DeleteContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteContactCompleted(this, new DeleteContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateContact", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CreateContact(
                    string name, 
                    string organization, 
                    string position, 
                    string storeType, 
                    string email, 
                    string showAs, 
                    string website, 
                    string imAddress, 
                    string phoneWork, 
                    string phoneHome, 
                    string faxWork, 
                    string phoneMobile, 
                    string workAddress, 
                    int correspondence, 
                    string notes, 
                    string imagen) {
            object[] results = this.Invoke("CreateContact", new object[] {
                        name,
                        organization,
                        position,
                        storeType,
                        email,
                        showAs,
                        website,
                        imAddress,
                        phoneWork,
                        phoneHome,
                        faxWork,
                        phoneMobile,
                        workAddress,
                        correspondence,
                        notes,
                        imagen});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CreateContactAsync(
                    string name, 
                    string organization, 
                    string position, 
                    string storeType, 
                    string email, 
                    string showAs, 
                    string website, 
                    string imAddress, 
                    string phoneWork, 
                    string phoneHome, 
                    string faxWork, 
                    string phoneMobile, 
                    string workAddress, 
                    int correspondence, 
                    string notes, 
                    string imagen) {
            this.CreateContactAsync(name, organization, position, storeType, email, showAs, website, imAddress, phoneWork, phoneHome, faxWork, phoneMobile, workAddress, correspondence, notes, imagen, null);
        }
        
        /// <remarks/>
        public void CreateContactAsync(
                    string name, 
                    string organization, 
                    string position, 
                    string storeType, 
                    string email, 
                    string showAs, 
                    string website, 
                    string imAddress, 
                    string phoneWork, 
                    string phoneHome, 
                    string faxWork, 
                    string phoneMobile, 
                    string workAddress, 
                    int correspondence, 
                    string notes, 
                    string imagen, 
                    object userState) {
            if ((this.CreateContactOperationCompleted == null)) {
                this.CreateContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateContactOperationCompleted);
            }
            this.InvokeAsync("CreateContact", new object[] {
                        name,
                        organization,
                        position,
                        storeType,
                        email,
                        showAs,
                        website,
                        imAddress,
                        phoneWork,
                        phoneHome,
                        faxWork,
                        phoneMobile,
                        workAddress,
                        correspondence,
                        notes,
                        imagen}, this.CreateContactOperationCompleted, userState);
        }
        
        private void OnCreateContactOperationCompleted(object arg) {
            if ((this.CreateContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateContactCompleted(this, new CreateContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateContact", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UpdateContact(
                    int id, 
                    string name, 
                    string organization, 
                    string position, 
                    string storeType, 
                    string email, 
                    string showAs, 
                    string website, 
                    string imAddress, 
                    string phoneWork, 
                    string phoneHome, 
                    string faxWork, 
                    string phoneMobile, 
                    string workAddress, 
                    int correspondence, 
                    string notes, 
                    string imagen) {
            object[] results = this.Invoke("UpdateContact", new object[] {
                        id,
                        name,
                        organization,
                        position,
                        storeType,
                        email,
                        showAs,
                        website,
                        imAddress,
                        phoneWork,
                        phoneHome,
                        faxWork,
                        phoneMobile,
                        workAddress,
                        correspondence,
                        notes,
                        imagen});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateContactAsync(
                    int id, 
                    string name, 
                    string organization, 
                    string position, 
                    string storeType, 
                    string email, 
                    string showAs, 
                    string website, 
                    string imAddress, 
                    string phoneWork, 
                    string phoneHome, 
                    string faxWork, 
                    string phoneMobile, 
                    string workAddress, 
                    int correspondence, 
                    string notes, 
                    string imagen) {
            this.UpdateContactAsync(id, name, organization, position, storeType, email, showAs, website, imAddress, phoneWork, phoneHome, faxWork, phoneMobile, workAddress, correspondence, notes, imagen, null);
        }
        
        /// <remarks/>
        public void UpdateContactAsync(
                    int id, 
                    string name, 
                    string organization, 
                    string position, 
                    string storeType, 
                    string email, 
                    string showAs, 
                    string website, 
                    string imAddress, 
                    string phoneWork, 
                    string phoneHome, 
                    string faxWork, 
                    string phoneMobile, 
                    string workAddress, 
                    int correspondence, 
                    string notes, 
                    string imagen, 
                    object userState) {
            if ((this.UpdateContactOperationCompleted == null)) {
                this.UpdateContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateContactOperationCompleted);
            }
            this.InvokeAsync("UpdateContact", new object[] {
                        id,
                        name,
                        organization,
                        position,
                        storeType,
                        email,
                        showAs,
                        website,
                        imAddress,
                        phoneWork,
                        phoneHome,
                        faxWork,
                        phoneMobile,
                        workAddress,
                        correspondence,
                        notes,
                        imagen}, this.UpdateContactOperationCompleted, userState);
        }
        
        private void OnUpdateContactOperationCompleted(object arg) {
            if ((this.UpdateContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateContactCompleted(this, new UpdateContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "8.4.8.2")]
    public delegate void GetAllContactsCompletedEventHandler(object sender, GetAllContactsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "8.4.8.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllContactsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllContactsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "8.4.8.2")]
    public delegate void GetSingleContactCompletedEventHandler(object sender, GetSingleContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "8.4.8.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSingleContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSingleContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "8.4.8.2")]
    public delegate void DeleteContactCompletedEventHandler(object sender, DeleteContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "8.4.8.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "8.4.8.2")]
    public delegate void CreateContactCompletedEventHandler(object sender, CreateContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "8.4.8.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "8.4.8.2")]
    public delegate void UpdateContactCompletedEventHandler(object sender, UpdateContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "8.4.8.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}
